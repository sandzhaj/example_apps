pipeline {
    agent any

    environment {
        APP_NAME = 'my-app'
    }

    options {
        timeout(time: 10, unit: 'MINUTES')
        buildDiscarder(logRotator(numToKeepStr: '5'))
        timestamps()
        disableConcurrentBuilds()
    }

    parameters {
        string(name: "VERSION", defaultValue: "2.0.0", description: "–í–µ—Ä—Å–∏—è —Å–±–æ—Ä–∫–∏")
        booleanParam(name: "SKIP_TESTS", defaultValue: false, description: "–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å —Ç–µ—Å—Ç—ã?")
        choice(name: "ENV", choices: ["dev", "stage", "prod"], description: "–û–∫—Ä—É–∂–µ–Ω–∏–µ")
    }


    stages {
        stage('–ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ') {
            steps {
                echo 'üì• –ö–ª–æ–Ω–∏—Ä—É–µ–º —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π...'
                git url: 'https://github.com/sandzhaj/example_apps.git', branch: 'main'
            }
        }

        stage('–°–±–æ—Ä–∫–∞') {
            steps {
                script {
                    echo "üîß –°–æ–±–∏—Ä–∞–µ–º –ø—Ä–æ–µ–∫—Ç ${env.APP_NAME}..."
                    echo "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã ${params.SKIP_TESTS}, ${params.VERSION}, ${params.ENV},"
                    sh "echo ./build.sh > myapp.jar"
                }
            }
        }

        stage('Test') {
            steps {
                echo '‚úÖ –ü—Ä–æ–≥–æ–Ω—è–µ–º —Ç–µ—Å—Ç—ã...'
                sh 'echo ./run-tests.sh'
            }
        }

        stage('Package') {
            steps {
                echo 'üì¶ –£–ø–∞–∫–æ–≤—ã–≤–∞–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ...'
                sh 'tar -czf app.tar.gz myapp.jar'
                archiveArtifacts artifacts: 'app.tar.gz'
            }
        }
    }

    post {
        always {
            echo 'üßπ –ß–∏—Å—Ç–∏–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã...'
            sh 'rm -rf ./'
        }
    }
}